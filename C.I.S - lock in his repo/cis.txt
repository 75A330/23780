  <script>

    function openForm() {

      document.getElementById('idForm').style.display = 'block';
      document.getElementById('overlay').style.display = 'block';

    }

    function closeForm() {

      document.getElementById('idForm').style.display = 'none';
      document.getElementById('overlay').style.display = 'none';

    }

    function generateID(dob) {

      const date = new Date(dob);
      const base = date.getMonth() + 1 + '' + date.getDate() + '' + date.getFullYear();
      let uniquePart;
      do {
        uniquePart = Math.floor(1000000 + Math.random() * 9000000);
      } while (localStorage.getItem(base + uniquePart));
      return base + uniquePart;

    }

    document.getElementById('cisForm').addEventListener('submit', function (e) {
      e.preventDefault();
      const formData = new FormData(this);
      const dob = formData.get('dob');
      const id = generateID(dob);

      const user = {

        id: id,
        fullname: formData.get('fullname'),
        email: formData.get('email'),
        dob: dob,
        address: formData.get('address'),
        phone: formData.get('phone')

      };

      localStorage.setItem(id, JSON.stringify(user));

      alert(`Application submitted successfully and is now in review! Please check your email.`);
      this.reset();
      closeForm();
    });

    function checkStatus() {

      const number = document.getElementById('applicationNumber').value;
      const data = localStorage.getItem(number);
      const statusDiv = document.getElementById('statusResult');
      if (data) {
        const user = JSON.parse(data);
        statusDiv.innerHTML = `<p>Application found for: <strong>${user.fullname}</strong></p><p>Status: Pending Verification</p>`;
      } else {
        statusDiv.innerHTML = '<p>No application found. Please check your number.</p>';
      }

    }

     const binaryContainer = document.getElementById('binary-stream');
    function createBinaryStream() {
      for (let i = 0; i < 10; i++) {
        const bin = document.createElement('div');
        bin.className = 'binary';
        bin.style.left = Math.random() * 100 + 'vw';
        bin.style.animationDuration = 2 + Math.random() * 3 + 's';
        bin.innerText = Math.random() < 0.5 ? '0' : '1';
        binaryContainer.appendChild(bin);
      }
    }
    setInterval(createBinaryStream, 2000);

  </script>

















--






















Alright, let's break down this JavaScript code snippet line by line, explaining each construct and its purpose in detail. Imagine we're dissecting it piece by piece to understand its inner workings.

**1. The `<script>` Tag:**

```html
<script>
  // JavaScript code goes here
</script>
```

* **`<script>`:** This is an HTML tag that encloses JavaScript code. The browser recognizes anything within these tags as executable JavaScript.
* **Purpose:** It tells the browser to interpret the content inside as a scripting language (in this case, JavaScript) that will add dynamic behavior to the web page.

**2. Function Definition: `openForm()`**

```javascript
function openForm() {
  document.getElementById('idForm').style.display = 'block';
  document.getElementById('overlay').style.display = 'block';
}
```

* **`function openForm() { ... }`:** This declares a function named `openForm`. Functions are reusable blocks of code that perform specific tasks.
    * **`function`:** Keyword used to define a function in JavaScript.
    * **`openForm`:** The name given to this function. It's a descriptive name suggesting its purpose.
    * **`()`:** Parentheses that follow the function name. These can contain parameters (inputs) that the function might accept, but in this case, it takes no arguments.
    * **`{ ... }`:** Curly braces that enclose the code block that will be executed when the `openForm` function is called.

* **`document.getElementById('idForm')`:** This line uses the `document` object, which represents the HTML document in the browser.
    * **`document`:** A built-in JavaScript object that provides access to all elements in the HTML document.
    * **`.getElementById()`:** A method of the `document` object. It searches the HTML document for an element whose `id` attribute matches the string provided in the parentheses (in this case, `'idForm'`).
    * **`'idForm'`:** A string literal representing the specific `id` of an HTML element (likely a form).

* **`.style`:** This property of an HTML element object provides access to the inline CSS styles applied to that element.

* **`.display`:** This is a CSS property that controls the visibility and layout of an HTML element.
    * **`'block'`:** One of the possible values for the `display` property. Setting it to `'block'` makes the element behave like a block-level element, meaning it will take up the full width available and start on a new line. It also respects height and width properties.
    * **`=`:** The assignment operator, used to set the value of the `display` property.

* **`document.getElementById('overlay').style.display = 'block';`:** This line does the exact same thing as the previous one, but it targets an HTML element with the `id` of `'overlay'`. This element is likely a semi-transparent layer used to dim the background when the form is opened, providing visual focus to the form.

**In Summary of `openForm()`:** This function finds the HTML elements with the IDs `idForm` and `overlay` and sets their `display` style to `block`, making them visible on the web page.

**3. Function Definition: `closeForm()`**

```javascript
function closeForm() {
  document.getElementById('idForm').style.display = 'none';
  document.getElementById('overlay').style.display = 'none';
}
```

* This function is structured very similarly to `openForm()`.
* **`function closeForm() { ... }`:** Declares a function named `closeForm`.
* **`document.getElementById('idForm').style.display = 'none';`:** Finds the HTML element with the ID `idForm` and sets its `display` style to `'none'`.
    * **`'none'`:** Another possible value for the `display` property. Setting it to `'none'` completely removes the element from the document flow, meaning it takes up no space and is not visible.
* **`document.getElementById('overlay').style.display = 'none';`:** Similarly, this hides the HTML element with the ID `'overlay'`.

**In Summary of `closeForm()`:** This function finds the HTML elements with the IDs `idForm` and `overlay` and sets their `display` style to `none`, effectively hiding them from view.

**4. Function Definition: `generateID(dob)`**

```javascript
function generateID(dob) {
  const date = new Date(dob);
  const base = date.getMonth() + 1 + '' + date.getDate() + '' + date.getFullYear();
  let uniquePart;
  do {
    uniquePart = Math.floor(1000000 + Math.random() * 9000000);
  } while (localStorage.getItem(base + uniquePart));
  return base + uniquePart;
}
```

* **`function generateID(dob) { ... }`:** Declares a function named `generateID` that accepts one parameter named `dob` (likely representing the date of birth).

* **`const date = new Date(dob);`:**
    * **`const`:** Keyword used to declare a constant variable. Once a value is assigned to a constant, it cannot be reassigned.
    * **`date`:** The name of the constant variable.
    * **`new Date(dob)`:** This creates a new `Date` object in JavaScript.
        * **`Date`:** A built-in JavaScript object that represents a specific point in time.
        * **`new`:** The keyword used to create a new instance of an object.
        * **`(dob)`:** The `dob` parameter (which is expected to be a string or number that `Date` can interpret as a date) is passed to the `Date` constructor to initialize the date object.

* **`const base = date.getMonth() + 1 + '' + date.getDate() + '' + date.getFullYear();`:**
    * **`base`:** Another constant variable.
    * **`date.getMonth()`:** A method of the `Date` object that returns the month (0 for January, 1 for February, and so on, up to 11 for December).
    * **`+ 1`:** We add 1 because months are 0-indexed, and we likely want a 1-indexed month for the ID.
    * **`+ ''`:** This is a common JavaScript trick to explicitly convert the number to a string. When you use the `+` operator with a string and a number, JavaScript will convert the number to a string before concatenating them.
    * **`date.getDate()`:** A method of the `Date` object that returns the day of the month (1 to 31).
    * **`date.getFullYear()`:** A method of the `Date` object that returns the four-digit year.
    * **Purpose:** This line extracts the month, day, and year from the `dob` and concatenates them into a string to form the base of the unique ID.

* **`let uniquePart;`:**
    * **`let`:** Keyword used to declare a variable that can be reassigned later.
    * **`uniquePart`:** The name of the variable that will hold a randomly generated unique number.

* **`do { ... } while (localStorage.getItem(base + uniquePart));`:** This is a `do...while` loop, which executes the code inside the `do` block at least once, and then continues to loop as long as the condition in the `while` part is true.
    * **`uniquePart = Math.floor(1000000 + Math.random() * 9000000);`:** Inside the loop:
        * **`Math.random()`:** A static method of the `Math` object that returns a floating-point, pseudo-random number in the range 0 (inclusive) up to but not including 1 (e.g., 0.12345).
        * **`* 9000000`:** This scales the random number to be between 0 (inclusive) and 9000000 (exclusive).
        * **`+ 1000000`:** This shifts the range to be between 1000000 (inclusive) and 10000000 (exclusive), resulting in a 7-digit random number.
        * **`Math.floor()`:** A static method of the `Math` object that returns the largest integer less than or equal to the given number (effectively rounding down). So, `uniquePart` will be a random integer between 1000000 and 9999999.
    * **`localStorage.getItem(base + uniquePart)`:**
        * **`localStorage`:** A built-in Web API that allows web applications to store key/value pairs locally within the user's browser with no expiration date.
        * **`.getItem()`:** A method of the `localStorage` object that retrieves the value associated with the given key.
        * **`base + uniquePart`:** This concatenates the `base` (date part) and the randomly generated `uniquePart` to form a potential unique key.
        * **Condition of the `while` loop:** The loop continues as long as `localStorage.getItem(base + uniquePart)` returns a non-null value (meaning an item with that key already exists in the local storage). This ensures that the generated ID is likely to be unique for the given date of birth.

* **`return base + uniquePart;`:** Once the `do...while` loop finds a `uniquePart` that, when combined with `base`, does not already exist as a key in `localStorage`, the function returns the combined string as the generated ID.

**In Summary of `generateID()`:** This function takes a date of birth, extracts the month, day, and year to create a base string, and then generates a random 7-digit number. It then checks if an ID already exists in the browser's `localStorage` with the combined base and random number. If it does, it generates a new random number and repeats the check until a unique ID is found, which is then returned.

**5. Event Listener for Form Submission: `document.getElementById('cisForm').addEventListener('submit', function (e) { ... });`**

```javascript
document.getElementById('cisForm').addEventListener('submit', function (e) {
  e.preventDefault();
  const formData = new FormData(this);
  const dob = formData.get('dob');
  const id = generateID(dob);

  const user = {
    id: id,
    fullname: formData.get('fullname'),
    email: formData.get('email'),
    dob: dob,
    address: formData.get('address'),
    phone: formData.get('phone')
  };

  localStorage.setItem(id, JSON.stringify(user));

  alert(`Application submitted successfully and is now in review! Please check your email.`);
  this.reset();
  closeForm();
});
```

* **`document.getElementById('cisForm')`:** Selects the HTML element with the ID `'cisForm'`. This is expected to be a `<form>` element.

* **`.addEventListener('submit', function (e) { ... });`:** This attaches an event listener to the selected form element.
    * **`.addEventListener()`:** A method that allows you to set up functions to be called when a specific event occurs on an element.
    * **`'submit'`:** The type of event being listened for. This event is triggered when a form is submitted (typically when the user clicks a submit button).
    * **`function (e) { ... }`:** The event handler function. This function will be executed when the `'submit'` event occurs.
        * **`e`:** An event object that is automatically passed to the event handler function. It contains information about the event that occurred.

* **`e.preventDefault();`:**
    * **`e`:** The event object from the submit event.
    * **`.preventDefault()`:** A method of the event object that stops the browser's default action associated with the event. For a submit event on a form, the default action is usually to reload the page and send the form data to a server. We prevent this because the code likely handles the form data using JavaScript.

* **`const formData = new FormData(this);`:**
    * **`FormData`:** A built-in JavaScript object that provides an easy way to construct a set of key/value pairs representing form fields and their values.
    * **`new FormData(this)`:** Creates a new `FormData` object, initialized with the data from the form element that triggered the event (referred to by `this` inside the event listener, which will be the `cisForm` element).

* **`const dob = formData.get('dob');`:**
    * **`.get('dob')`:** A method of the `FormData` object that retrieves the value of the form field with the `name` attribute set to `'dob'`.

* **`const id = generateID(dob);`:** Calls the `generateID` function, passing the retrieved date of birth (`dob`) as an argument, and stores the returned unique ID in the `id` constant.

* **`const user = { ... };`:** Creates an object literal named `user` to store the form data.
    * **`{ ... }`:** Curly braces define an object literal, which is a collection of key-value pairs.
    * **`id: id,`**: Assigns the generated `id` to the `id` property of the `user` object.
    * **`fullname: formData.get('fullname'),`**: Retrieves the value of the form field with the name `'fullname'` and assigns it to the `fullname` property.
    * **`email: formData.get('email'),`**: Retrieves the email value.
    * **`dob: dob,`**: Stores the date of birth.
    * **`address: formData.get('address'),`**: Retrieves the address value.
    * **`phone: formData.get('phone')`**: Retrieves the phone number value.

* **`localStorage.setItem(id, JSON.stringify(user));`:**
    * **`.setItem(key, value)`:** A method of the `localStorage` object that stores a key/value pair.
    * **`id`:** The generated unique ID is used as the key.
    * **`JSON.stringify(user)`:**
        * **`JSON`:** A built-in JavaScript object that provides methods for working with JSON (JavaScript Object Notation) data.
        * **`.stringify()`:** A method of the `JSON` object that converts a JavaScript object or value to a JSON string. `localStorage` can only store strings, so we need to serialize the `user` object into a JSON string before storing it.

* **`alert(`Application submitted successfully and is now in review! Please check your email.`);`:**
    * **`alert()`:** A built-in JavaScript function that displays a modal dialog box with an optional message and an OK button.
    * **`` ` ``:** Template literals (backticks) allow you to embed expressions (like variables) directly within a string using the `${}` syntax. This creates a user-friendly success message.

* **`this.reset();`:**
    * **`this`:** Inside the event listener attached to the form, `this` refers to the form element (`cisForm`).
    * **`.reset()`:** A method of the `<form>` element that resets all the form fields to their initial values.

* **`closeForm();`:** Calls the `closeForm` function defined earlier, which hides the form and the overlay.

**In Summary of the Event Listener:** When the form with the ID `cisForm` is submitted, this code prevents the default form submission behavior, gathers the form data, generates a unique ID based on the date of birth, creates a `user` object with the form data and the generated ID, stores this user data as a JSON string in the browser's `localStorage` using the ID as the key, displays a success message to the user, resets the form fields, and closes the form (hides it).

**6. Function Definition: `checkStatus()`**

```javascript
function checkStatus() {
  const number = document.getElementById('applicationNumber').value;
  const data = localStorage.getItem(number);
  const statusDiv = document.getElementById('statusResult');
  if (data) {
    const user = JSON.parse(data);
    statusDiv.innerHTML = `<p>Application found for: <strong>${user.fullname}</strong></p><p>Status: Pending Verification</p>`;
  } else {
    statusDiv.innerHTML = '<p>No application found. Please check your number.</p>';
  }
}
```

* **`function checkStatus() { ... }`:** Declares a function named `checkStatus`.

* **`const number = document.getElementById('applicationNumber').value;`:**
    * **`document.getElementById('applicationNumber')`:** Selects the HTML element with the ID `'applicationNumber'` (likely an input field where the user enters their application ID).
    * **`.value`:** Retrieves the current value entered by the user in that input field.
    * **`number`:** Stores the retrieved value in a constant variable named `number`.

* **`const data = localStorage.getItem(number);`:**
    * **`localStorage.getItem(number)`:** Retrieves the data associated with the key stored in the `number` variable from the browser's `localStorage`. If no item with that key exists, it returns `null`.
    * **`data`:** Stores the retrieved data (which will be a JSON string or `null`) in a constant variable named `data`.

* **`const statusDiv = document.













--



















